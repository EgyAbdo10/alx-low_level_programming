!<arch>
0-isupper.c/    0           0     0     644     234       `
#include "main.h"
/**
 * _isupper - check the letter case
 * @letter: the letter
 * Return: 1 if upeer and 0 if lower
 */

int _isupper(int letter)
{
int i;
for (i = 65; i < 91; i++)
{
if (i == letter)
{
return (1);
}
}
return (0);
}
0-memset.c/     0           0     0     644     235       `
#include "main.h"
/**
 * _memset - blabla
 * @s: first
 * @b: second
 * @n: third
 * Return: s after modification
 */
char *_memset(char *s, char b, unsigned int n)
{
unsigned int i;
for (i = 0; i < n; i++)
{
s[i] = b;
}
return (s);
}

0-strcat.c/     0           0     0     644     315       `
#include "main.h"
/**
 * _strcat - cancatenate
 * @dest: first str
 * @src: second str
 * Return: the concatenated pointer str
 */
char *_strcat(char *dest, char *src)
{
int i = 0;
int j = 0;
while (dest[i] != '\0')
{
i++;
}
while (src[j] != '\0')
{
dest[i] = src[j];
j++;
i++;
}
dest[i] = src[j];
return (dest);
}

100-atoi.c/     0           0     0     644     53        `
#include "main.h"
int _atoi(char *s)
{
return (0);
}

1-isdigit.c/    0           0     0     644     194       `
#include "main.h"
/**
 * _isdigit - check the letter case
 * @c: the letter
 * Return: 1 if upeer and 0 if lower
 */

int _isdigit(int c)
{
if (c >= 48 && c <= 57)
{
return (1);
}
return (0);
}
1-memcpy.c/     0           0     0     644     260       `
#include "main.h"
/**
 * _memcpy - blabla
 * @dest: first
 * @src: second
 * @n: third
 * Return: dest after modification
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i;
for (i = 0; i < n; i++)
{
dest[i] = src[i];
}
return (dest);
}
1-strncat.c/    0           0     0     644     444       `
#include "main.h"
/**
 * _strncat - cancatenate
 * @dest: first str
 * @src: second str
 * @n: number of bytes taken from src
 * Return: the concatenated pointer str
 */
char *_strncat(char *dest, char *src, int n)
{
int i = 0;
int j = 0;
while (dest[i] != '\0')
{
i++;
}
if (i > n)
{
while (j < n)
{
dest[i] = src[j];
j++;
i++;
}
}
else if (i <= n)
{
while (src[j] != '\0')
{
dest[i] = src[j];
j++;
i++;
}
dest[i] = src[j];
}
return (dest);
}
2-strchr.c/     0           0     0     644     232       `
#include "main.h"
/**
 * _strchr - blabla
 * @s: first
 * @c: second
 * Return: dest after modification
 */
char *_strchr(char *s, char c)
{
int i;
for (i = 0; s[i] >= '\0'; i++)
{
if (s[i] == c)
{
return (&s[i]);
}
}
return (0);
}
2-strlen.c/     0           0     0     644     218       `
#include "main.h"
/**
 * _strlen - retest the number to 98
 * @s: the first number you want to swap
 * Return: void
 */
int _strlen(char *s)
{
int length = 0;
while (s[length] != '\0')
{
length++;
}
return (length);
}
2-strncpy.c/    0           0     0     644     364       `
#include "main.h"
/**
 * _strncpy - copies a string into another one
 * @dest: first str
 * @src: second str
 * @n: number of bytes taken from src
 * Return: the concatenated pointer str
 */
char *_strncpy(char *dest, char *src, int n)
{
int j = 0;
while (j < n && src[j] != '\0')
{
dest[j] = src[j];
j++;
}
while (j < n)
{
dest[j] = '\0';
j++;
}
return (dest);
}
3-islower.c/    0           0     0     644     195       `
#include "stdio.h"
/**
 * _islower - alpha
 * Return:  0 or 1
 * @c: the letter in ascii
 */
int _islower(int c)
{
int i;
for (i = 97; i < 123; i++)
{
if (i == c)
{
return (1);
}
}
return (0);
}

3-puts.c/       0           0     0     644     210       `
#include "main.h"
/**
 * _puts - retest the number to 98
 * @str: the first number you want to swap
 * Return: void
 */
void _puts(char *str)
{
for (; *str != '\0'; str++)
{
_putchar(*str);
}
_putchar('\n');
}
3-strcmp.c/     0           0     0     644     306       `
#include "main.h"
/**
 * _strcmp - cancatenate
 * @s1: first str
 * @s2: second str
 * Return: the concatenated pointer str
 */
int _strcmp(char *s1, char *s2)
{
int i = 0;
int diff;
while (s1[i] != '\0' && s2[i] != '\0')
{
if (s1[i] != s2[i])
{
diff = s1[i] - s2[i];
return (diff);
}
i++;
}
return (0);
}
3-strspn.c/     0           0     0     644     78        `
#include "main.h"
unsigned int _strspn(char *s, char *accept)
{
return (0);
}
4-isalpha.c/    0           0     0     644     249       `
#include "main.h"
/**
 * _isalpha - alpha
 * Return: - void
 * @c: the char in ascii
 */
int _isalpha(int c)
{
int i;
for (i = 97; i < 123; i++)
{
if (i == c)
{
return (1);
}
}
for (i = 65; i < 91; i++)
{
if (i == c)
{
return (1);
}
}
return (0);
}

4-strpbrk.c/    0           0     0     644     72        `
#include "main.h"
char *_strpbrk(char *s, char *accept)
{
return (s);
}
5-strstr.c/     0           0     0     644     85        `
#include "main.h"
char *_strstr(char *haystack, char *needle)
{
return (haystack);
}

6-abs.c/        0           0     0     644     191       `
#include "main.h"
/**
 * _abs - print the sign of the passed number
 * Return: - 1 or 0 or -1
 * @n: the number passed
 */
int _abs(int n)
{
if (n < 0)
{
n *= -1;
return (n);
}
return (n);
}

9-strcpy.c/     0           0     0     644     290       `
#include "main.h"
/**
 * _strcpy - reverse string
 * @src: the integer array
 * @dest: the number of elements
 * Return: void
 */
char *_strcpy(char *dest, char *src)
{
int len = 0;
int i = 0;
while (src[len] != '\0')
{
len++;
}
while (i <= len)
{
dest[i] = src[i];
i++;
}
return (dest);
}
_putchar.c/     0           0     0     644     265       `
#include "main.h"
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

